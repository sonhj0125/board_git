 
 보안(Security)은 설계 요소 중 가장 중요한 부분 중 하나이다. 
 이러한 보안의 개념을 스프링 시큐리티와 함께 알아보자.

-------------------------------------
 1. 보안의 핵심용어 - "인증과 역할(권한)부여"
-------------------------------------
▶▶ "인증" 이란?
   -- 애플리케이션을 사용하려는 사용자가 본인이 맞는지 확인하는 절차를 말한다.
     예) 로그인 인증

>>> 인증의 방식
    ① 크리덴셜 기반 인증 : 사용자명과 비밀번호를 이용한 방식 
    ② 이중인증              : ATM을 이용할 때처럼 물리적인 카드와 사용자가 입력한 개인정보를 조합하는 방식 
    ③ 하드웨어 인증       : 자동차 키와 같은 방식


▶▶ "역할(권한)부여" 란?
   -- 인증을 통해서 인증된 주체를 하나 이상의 권한(역할)에 매핑하고 보호된 리소스에 대한 권한을 체크하는 것을 말한다.
 

                      >>>> 스프링 시큐리티의 인증과 인가 <<<<
    
                                  <<인증관리자>>            <<접근결정관리자>>
                                |                     |
 개발팀일반사원  ------------------->|  개발팀    ----------> |   개발팀                
 (서사원)     모든직원의 급여명세서       |  서사원                            |   서사원
                       열람을 요청                     |  (인증통과)            |  (불인가함으로 급여명세서 조회 불가능)          
                                |                     |                        
                                |                     |  <<모든직원들의 급여명세서정보>> 
 재무팀부장  ---------------------->|  재무팀    ----------> |   재무팀                
 (서부장)    모든직원의 급여명세서         |   서부장                          |   서부장
                     열람을 요청                       |  (인증통과)           |   (인가함으로 급여명세서 조회 가능)         
                               |                     | 
                               |                     | 
                                      
개발팀 일반 사원인 서사원과 재무팀의 서부장은 사내 "모든 직원들"의 급여명세서를 열람하고 싶어한다. 
먼저 시스템에 로그인을 하면 인증관리자(인증을 처리함)는 사용자가 제시한 정보를 통해 사용자가 누구인지를 확인한다. 
다음으로, 접근결정 관리자는 사용자가 가지고 있는 역할(권한)을 가지고 급여명세서에 접근할 수 있는지 아닌지를 판별하게 된다.


----------
 2. 필터
----------
 스프링 시큐리티에서 웹 애플리케이션에 영향을 주는 방식은 여러가지의 ServletRequest 필터를 사용하는 방식이다. 
 즉, 필터들이 애플리케이션에 대한 모든 요청을 감싸서 처리해주는 것으로 작동되도록 되어있기 때문이다. 
 스프링 시큐리티에서 여러개의 필터들은 아래 설명과 같이 체인형태를 이루면서 동작한다. 
 "자동설정 옵션 을 사용"하면 "10개의 스프링 시큐리티 필터"가 "자동으로 설정" 된다.
 
 
                              >>>> 스프링 시큐리티의 웹 요청처리 <<<<
    
                                    << 서블릿 필터 체인 >>                    
                                    |                |                
 <<사용자>>  ----------------------→ | (요청전 처리작동)   | --------------------------
     ↑      서블릿에 요청을 보냄                  |                |                           |            
     |                              |                |                           ↓
     |                              |                |                        <<서블릿>>          
     |                              |                |                           |                          
     |----------------------------- | (요청후 처리작동)  | ←-------------------------| 
                                    |                |      사용자의 요청에 대한 
                                    << 서블릿 필터 체인 >>       응답결과를 보내줌 
 
 
 
 ▶▶  DelegatingFilterProxy

    DelegatingFilterProxy 는 스프링 시큐리티가 모든 애플리케이션 요청을 감싸게 해서 모든 요청에 보안이 적용되게 하는 서블릿 필터로서
       스프링 프레임워크에서 제공해주는 서블릿 필터이다. 
       스프링 프레임워크 기반의 웹 애플리케이션에서 서블릿 필터 라이프 사이클과 연계해 스프링 빈 의존성을 서블릿 필터에 바인딩하는데 사용한다.

    web.xml에 다음과 같은 설정을 해주면 애플리케이션의 모든 요청을 스프링 시큐리티가 감싸서 처리할 수 있게 해준다.
    
 	<filter> 
		<filter-name>springSecurityFilterChain</filter-name> 
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
	</filter> 
	<filter-mapping> 
		<filter-name>springSecurityFilterChain</filter-name> 
		<url-pattern>/*</url-pattern> 
	</filter-mapping>
 
 
 -----------------------------------------------------------------------------------------------------------------------------------------------
                    필터	                                                                                                     설명
 -----------------------------------------------------------------------------------------------------------------------------------------------       
  SecurityContextPersistenceFilter			SecurityContextRepository에서 SecurityContext를 로드하고 저장하는 일을 담당함
  
  LogoutFilter								로그아웃 URL로 지정된 가상URL에 대한 요청을 감시하고 매칭되는 요청이 있으면 사용자를 로그아웃시킴
  
  UsernamePasswordAuthenticationFilter		사용자명과 비밀번호로 이뤄진 폼기반 인증에 사용하는 가상 URL요청을 감시하고 요청이 있으면 사용자의 인증을 진행함
  
  DefaultLoginPageGeneratingFilter			폼기반 또는 OpenID 기반 인증에 사용하는 가상URL에 대한 요청을 감시하고 로그인 폼 기능을 수행하는데 필요한 HTML을 생성함 
  
  BasicAuthenticationFilter					HTTP 기본 인증 헤더를 감시하고 이를 처리함
  
  RequestCacheAwareFilter					로그인 성공 이후 인증 요청에 의해 가로채어진 사용자의 원래 요청을 재구성하는데 사용됨 
                                            SecurityContextHolderAwareRequestFilter HttpServletRequest를 HttpServletRequestWrapper를 
                                                                                  상속하는 하위 클래스(SecurityContextHolderAwareRequestWrapper)로 감싸서 필터 체인상 하단에 위치한 요청 프로세서에 추가 컨텍스트를 제공함  
  
  AnonymousAuthenticationFilter				이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청 관련 인증 토큰에서 사용자가 익명 사용자로 나타나게 됨 
  
  SessionManagementFilter					인증된 주체를 바탕으로 세션 트래킹을 처리해 단일 주체와 관련한 모든 세션들이 트래킹되도록 도움
  
  ExceptionTranslationFilter				이 필터는 보호된 요청을 처리하는 동안 발생할 수 있는 기대한 예외의 기본 라우팅과 위임을 처리함
  
  FilterSecurityInterceptor					이 필터는 권한부여와 관련한 결정을 AccessDecisionManager에게 위임해 권한부여 결정 및 접근 제어 결정을 쉽게 만들어 줌
 -----------------------------------------------------------------------------------------------------------------------------------------------
  >>>>> 필터 체인의 제일 마지막에 위치한 FilterSecurityInterceptor가 앞에 지나온 모든 필터들의 정보를 토대로 최종 결정을 내린다. <<<<<
  
  
 -----------------
  3. 커스터마이징
 -----------------
   스프링 시큐리티를 사용하면 보안에 관하여 대부분의 것들이 가능하지만, 
   기본 옵션에서 벗어난 요구사항들을 충족시키기 위해 커스터마이징하거나 확장시킬 수 있다. 
   이렇게 하려면 전체 스프링 시큐리티 필터 체인과 지원 인프라 스트럭처를 처음부터 하나씩 직접 설정해야 한다. 
   이렇게 하나씩 작성할 때에 아래의 빈 의존관계 그림을 보고 설정을 해나간다면 한결 수월할 것이다. 
   주의점 : 스프링 시큐리티의 필터들은 순서가 존재하며 이 순서를 어길 경우에는 예상치 못한 결과가 나올 수도 있으므로 특별한 경우가 아니라면 순서를 지켜주는 것이 좋다. 
   (참고를 위하여 클릭하면 커질 수 있도록 큰 이미지를 사용하였다.)
   
 --------------------------- 
  4. 기본설정과 커스터마이징 비교
 ---------------------------
	① 기본 설정의 장점
	  - 일반적인 웹 기반 및 메소드 기반 설정에 적용할 수 있는 강력한 기능의 축약 구문
	  - 복잡한 설정을 적용하기 위해 개발자들이 내부적으로 일어나는 세부 내용에 대해 알 필요가 없다.
	  - security 네임스페이스 핸들러 코드가 다양한 설정 이슈 관련 문제를 파악하고 경고해준다.
	  - 설정 과정에서 필요한 부분을 빼놓고 설정할 위험이 극히 적다.
	
	② 커스터마이징의 장점
	  -	확장, 오버라이드, 표준 스프링 스택에서 의도적으로 일부를 생략하는 것과 같은 유연성을 허용한다.
	  - filter-chain 엘리먼트의 pattern 어트리뷰트를 사용해 URL 패턴에 의존한 커스텀 필터 체인 및 인증을 허용한다. 
	       이러한 기능은 웹 서비스 또는 REST 인증과 사용자 기반 인증이 함께 사용될 때 필요할 수 있다.
	  - 설정 파일들이 스프링 시큐리티 네임스페이스 처리와 직접적인 연관성이 없다.
	  - 인증 관리자를 명시적으로 설정하거나 오버라이드 할 수 있다.
	  - 단순한 security 네임스페이스를 적용할 때보다 훨씬 더 많은 설정 옵션을 사용할 수 있다.
	
	그렇다면 어느것을 선택해야 할까?
	너무나도 당연한 답이지만 선택은 사용자의 몫이다. 
	하지만 가능하다면 기본 설정으로 사용을 하는 것이 예상하지 못한 결과를 초래하지는 않을 것이다.

 -------------------------------------------------------------------------
 
	▶▶ Spring EL 표현식
	
	http 설정에서 use-expressions=true 한 경우 SpEL(Spring EL expressions) 를 사용할 수 있다. 기본 값은 false 이다.
	
	스프링 표현 언어(SpEL) 에 대한 자세한 설명은 아래와 같다.
	
	---------------------------------------------------------------------------------------------------
	표현식             	                                설명
	---------------------------------------------------------------------------------------------------
	hasRole(role1)	                          인자로 들어간 권한(role1)을 가지고 있는 경우 true 를 리턴한다. 
	
	hasAnyRole(role1,role2)	            인자로 들어간 권한들(role1, role2) 중 하나라도 가지고 있을 경우 true 를 리턴한다.
	                              (인자로 들어가는 권한의 갯수는 제한이 없다. 예시를 보이기 위해 2개만 넣은 것이지 
	                                                       실제로 들어가는 권한의 갯수는 제한이 없다)   
	
	permitAll	                                권한이 있든 없든 모두 접근이 가능하다.
	
	denyAll	                                       권한이 있든 없든 모두 접근이 불가능하다.
	
	isAnonymous()	              Anonymous 사용자일 경우 true를 리턴한다.
	
	isRememberMe()	              Spring Security 의 Remember-me 기능으로 로그인 한 사용자일 경우 true 를 리턴한다.
	
	isAuthenticated()	          Anonymous 사용자가 아닐 경우(로그인을 성공해서 인증에 성공한 경우) true 를 리턴한다.
	
	isFullyAuthenticated()	      Anonymous 사용자가 아니고 Remember-me 기능으로 로그인 하지 않은 사용자일 경우 true 를 리턴한다. 
	
	principal	                  Allows direct access to the principal object representing the current user
	
	authentication	              Allows direct access to the current Authentication object obtained from the SecurityContext 
		
	출처 : 스프링 프레임워크 시큐리티 도움말 3.1.x (http://docs.spring.io/spring-security/site/docs/3.1.x/reference/el-access.html)
	
	
	SpEL 방식이 아닌 경우 아래와 같은 설정할 수 있다.
	------------------------------------------------------
	AUTHORITY								 DESCRIPTION
	------------------------------------------------------
	IS_AUTHENTICATED_ANONYMOUSLY			 익명 사용자
	IS_AUTHENTICATED_REMEMBERED	REMEMBERED 	 사용자
	IS_AUTHENTICATED_FULLY					 인증된 사용자
	
	출처 : 전자정부프레임워크 도움말 (http://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte:fdl:server_security:architecture#security_configuration)
	
	
	
	▶▶ 스프링 Security 어노테이션 사용하기
	
	좀 더 유연하게 접근 권한을 설정하기 위해 어노테이션을 사용할 수 있다. 
	한 곳에서 권한을 설정한다면 어플리케이션이 추가될때마다 수정되어야 하는 문제가 발생한다. 
	여러 어플리케이션을 개발하는 프로젝트라면 각각의 어플리케이션에 맞게 개별적으로 설정하는 것이 효과적이다.
	[참고] 스프링 서큐리티 어노테이션을 사용하기 위해 CGLib 가 필요하다.
	
	기존에 생성했던 security-context.xml 에 http 태그를 <http auto-config="true" /> 수정한다.
	security-context.xml 파일은 공통적인 보안에 대한 설정을 담당하는 파일이라고 생각하면 될 것 같다.
	그리고 servlet-context.xml 파일을 열어 아래와 같이 추가한다.
	<security:global-method-security proxy-target-class="true"
          secured-annotations="enabled"
          jsr250-annotations="enabled"
          pre-post-annotations="enabled" />
 
 -------------------------------------------------------------------------
 
 ========== <<< Spring Security의 세부적인 절차 >>> ==========
 
[절차1]
	Step 1. Spring Framework 를 이용한 프로젝트 생성
	Step 2. Spring Security 패키지의 설치
	Step 3. Spring Security Filter 설정
[절차2]
	Step 4. Spring Security 의 설정
	(1) Spring Security 에서 제공하는 암호의 인코딩을 담당하는 빈을 설정한다. 
		요즘은 사용자가 입력한 암호를 그대로 저장하지 않는다.
		사실 암호를 시스템에 저장할 이유가 없다. 시스템은 암호를 식별하기만 하면 되지 암호를 저장해 둘 필요가 없다는 말이다. 
		무슨 말이냐고? 암호를 기억하지 않고 어떻게 사용자 인증을 할까? 궁금할 것이다. 
		사용자가 입력한 암호를 암호화하여 그 결과를 DB에 저장해 두자. 
		그리고 매번 로그인할 때마다 사용자가 입력한 암호를 다시 암호화하여 그 결과를 DB에 저장된 암호화된 암호와 비교하면 
		사용자가 입력한 암호를 DB에 저장하지 않고도 인증을 수행할 수 있다.
		이것이 요즘 추세다.
		즉, 암호를 암호화(인코딩)하는 방법은 시스템의 보안에 있어 중요하다. 
		처음 계정을 생성할 때 적용한 암호화 방식과 로그인 할때 암호를 암호화하는 방식이 다르다면 결코 로그인에 성공하는 사람이 없기 때문이다.
              이렇게 계정을 생성할 때라든가 로그인을 할 때 암호의 암호화방식을 Spring Security에 설정해 둠으로써 
              다양한 암호화(인코딩) 방식을 변경 또는 적용할 수 있는 Spring Security의 배려(?)라 할 수 있다.
              
	(2) 이외에도 각 요청 경로 또는 요청 리소스에 대하여 '인가'와 '관리'권한 점검을 할 것인지, 
	       허용하면 안되는 상황에서 어떤 서비스(페이지)를 제공할 것인지를 설정한다. 
[절차3]
	Step 5.  세션에 사용자정보(일반정보, 권한정보 등)를 담아두기 위한 객체(bean)을 생성한다.
			  세션에 빈객체를 저장해 둔다고 Spring Security가 만능으로 처리하는 것은 아니다. 
			  최소한 Spring Security가 필요로 하는 사용자 정보의 입출력을 위해 규약을 만들어 두었다고 한다.
			  규약이라는 것을 문서로 보면.. 복잡할것은 뻔하니 인터페이스(Interface)를 제공한다고 한다.
			  바로 UserDetails라는 인터페이스를 상속받아서 구현을 하면 최소한 Spring Security가 필요로 하는 규약을 따를 수 있고, 
			 Spring Security가 사용자정보를 꺼내어 확인할 수 있다고 한다.

	Step 6. 사용자가 로그인을 시도했다면, 로그인 성공시 '성공'을 처리할 핸들러를 작성한다.
			이때, 사용자의 일반적인 정보와  '인가'및'권한' 정보를 세션에 저장하는 것이 바람직하다고 한다.
			또 로그를 기록해둔다면 향후 관리에 도움이 된다고도 한다.
			물론, Step 5에서 작성한 사용자 정보 객체를 이용함은 말할 것도 없을 듯하다.
			
	Step 7. 사용자가 로그인을 시도하고 로그인 결과 실패시 '실패'를 처리할 핸들러를 작성한다.
			이경우에는 세션에 무언가를 저장할 것도 없으니 다시 로그인을 시도하도록 하거나, 
			로그인 실패 횟수를 카운트하여 5번 실패시 암호를 초기화해버린다든가.. 뭐 그런거 하면 시스템 보안에 도움이 된다고 한다.
			
	Step 8. 인증을 수행할 서비스 객체를 작성한다.
			위 Step 6과 Step 7에서는 인증결과를 처리할 핸들러를 작성했다. 
			그럼, 인증절차는 누가 수행할까?
			사용자가 로그인을 시도하면, Spring Security는 UserDetailsService 클래스의 loadUserByUsername()메소드를 호출한단다.
			사용자가 로그인에 필요한 정보를 입력하면 이를 인자로 하여 loadUserByUsername()을 호출하는 것이 정책이므로,
			우리는 loadUserByUsername()에 DB쿼리 등을 이용하여 정상적인 사용자인지를 식별할 수 있도록 하면 될 것이다.
			이때, 비정상적인 로그인 시도라 판단되면(알수 없는 계정, 바르지 않은 암호 등) UsernameNotFoundException 예외를 throw 하면 
			Spring Security가 로그인 실패시 처리할 핸들러(Step 7에서 작성한..)를 호출한단다.

	Step 9. 인증을 수행할 컨트롤러를 작성한다.
			우리는 지금 Spring Framework에서 Spring Security를 이용하는 방법에 대해 배우고(?) 있다.
			즉, Spring Security 역시 Spring Framework의 구조를 따르고 있으므로 Step 8에서 작성한 서비스 객체를 호출할 컨트롤러가 필요하다.
			그러므로 로그인을 담당할 때 사용(호출되는)할 액션이 존재할 것이고, 이를 처리할 컨트롤러 역시 필요하다.
			이를 위해 우리는 컨트롤러를 만들어야 한다.
			컨트롤러를 만들고 메소드를 만든다음 '로그인'에 사용할 액션(action)을 어노테이션을 이용하여 작성하면 
			Spring Framework와 Spring Security에 의해 호출되고 위에서 작성한 환경설정정보와 객체들을 이용하여 훌륭히 수행해 줄 것이다.

	Step 10. 사용자가 인증(로그인)을 하기위해 입력할 화면을 만들자.
			사용자가 로그인 페이지에서 로그인 정보를 입력하고 Step 9에서 작성한 컨트롤러의 액션을 호출하였다고 하자.
			Spring Security가 무슨 천하무적, 전지전능 시스템인가?
			계정과 암호가 어떻게 어떤 변수에 저장되었는지를 어떻게 알겠는가?
			화면의 작성에도 최소한 Spring Security와의 약속을 지켜서 만들어야 한다.
			사용자가 입력한 로그인 정보는 "form" 태그 안에 작성해야하고.. 
			action의 이름은 "j_spring_security_check" 로 해야만 한단다.
			또한, 계정은 "j_username"이라는 변수에 저장해야 하고 암호는 'j_password'에 저장해야 한단다.
			이들은 Spring Security를 사용하기 위한 최소한의 약속(규약)이라니 꼭 지켜야 한단다.

	Step 11. 로그인 후 보여질 페이지를 작성하자.
			우리는 위에서 로그인 성공시 처리할 핸들러와 로그인 실패시 처리할 핸들러를 작성했다.
			핸들러라는 것은 제어의 흐름을 담당하고 있을뿐, 사용자에게 직접 그 내용을 보이는 것이 아니다.
			그러니, 로그인을 성공하면 위에서 작성한 핸들러가 사용자에게 로그인 결과를 보여줄 페이지가 필요하다.
			대부분 메인 페이지를 보여주던데.. 우리도 그리하면 좋을듯하다.


----------------------------------------------------------------------------------------------

***** 스프링 시큐리티와 데이터 베이스 연동 예제 *****

 Ctrl + Shift + L 키를 눌러서 검색어로 "#스프링보안" 을 하면 "#스프링보안01" 부터 "#스프링보안14" 까지 나온다.
  
1. 주요 설정 정보
   - 패스워드는 스프링에서 제공하는 sha-256(Secure Hash Algorithm, 해시 알고리즘) 알고리즘을 이용 암호화

   - 오라클 사용자명은 mymvc_user 이고, 암호는 cclass 임.
      샘플로 만든 security_member 테이블에는 관리자(admin)에 해당하는 데이터와 일반 사용자(leess, eomjh) 데이터를 추가함.
   
   - /src/main/webapp/WEB-INF/spring/securityConfig/security-context.xml
     공통 빈(시큐리티 관련 객체 생성 및 환경 설정)
     시큐리티와 관련 환경 설정 이므로 가장 중요한 부분임
     
    users-by-username-query="SELECT member_id AS username, member_pwd AS password, enabled FROM security_member WHERE member_id=?"
     부분에서 시큐리티는 컬럼명이 username, password, enabled 이어야 하므로 컬럼명을 변경해서 처리하면 됨.
     그리고 enabled 컬럼의 값이 1이어야만 시큐리티는 회원이 존재하는것으로 인식함.  


    - com.spring.app.security.loginsuccess.MyAuthenticationSuccessHandler
      로그인 성공후 처리를 위한 빈으로써 /board/src/main/webapp/WEB-INF/spring/securityConfig/security-context.xml 에 설정해두었음. 
     MyAuthenticationSuccessHandler 의 역할은 
      로그인이 성공되어지면 세션에 로그인 정보(아이디와 성명)를 저장하도록 하고,
      로그인이 성공되어진 후 화면에 보여질 페이지를 지정하도록 한다.		  
   
       
    - com.spring.app.security.controller.MemberController 
       익명사용자를 포함한 누구나 접근가능 및 로그인이 가능한 회원만 접근할 수 있는 회원전용 페이지 컨트롤러  
       
    - com.spring.app.security.controller.AdminController
       관리자만 접근할 수 있는 관리자전용 페이지 컨트롤러        


2. 테스트 
   http://localhost:9090/board/security/member/memberRegister.action
     에 가서 회원가입을 한 후 
   DB에 가서 가입한 회원의 암호컬럼(MEMBER_PWD)를 조회해보면 
     스프링에서 제공하는 sha-256(Secure Hash Algorithm, 해시 알고리즘) 알고리즘에 의해 
     암호컬럼(MEMBER_PWD)의 값이 암호화 되어져 나온다.
   
   select *
   from security_member
   order by created_date desc;
   
 
3. 테스트 
   http://localhost:9090/board/

  - 로그인하지 않은 경우
    http://localhost:9090/board/security/everybody.action

  - 로그인하지 않고서 http://localhost:9090/board/security/member/memberOnly.action 하면 
        자동으로 로그인 창으로 넘어감 -> 로그인 성공하면 바로 이전화면 페이지로 이동함.

  - 일반 사용자 계정인 leess 으로 로그인하고서 
    http://localhost:9090/board/security/admin/adminOnly.action 에 가면
    "접근불가!!" 라는 메시지를 출력함
     
  - 관리자 계정인 admin 으로 로그인하고서 
    http://localhost:9090/board/security/admin/adminOnly.action 에 가면
       접근이 가능함.   


