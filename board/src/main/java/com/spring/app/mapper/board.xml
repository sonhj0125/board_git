<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다. 그래서 namespace에 대부분 파일이름을 넣어준다.) ==== -->
<mapper namespace="board">

	<insert id="test_insert">
		insert into spring_test(no, name, writeday)
		values(101, '이순신', default)
	</insert>
	
	<!--  !!!! 주의해야할 사항은 리턴타입이 List<E> 이더라도 resultType 은 E 으로 해야만 한다. !!!! --> 
	<select id="test_select" resultType="com.spring.app.board.domain.TestVO"> 
		select no, name, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
		from spring_test
		order by no asc
	</select>
	
	
	<select id="test_select_vo2" resultType="com.spring.app.board.domain.TestVO2"> 
		select no, name, writeday
		from spring_test
		order by no asc
	</select>
	
	
	
	<!-- Map 사용 시  -->
	<resultMap type="HashMap" id="testMap">
		<result property="NO" column="no" javaType="String"/>
		<result property="NAME" column="name" javaType="String"/>
		<result property="WRITEDAY" column="writeday" javaType="String"/>
	</resultMap>
	
	<select id="test_select_map" resultMap="testMap"> 
		select no, name, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday
		from spring_test
		order by no asc
	</select>
	
	
	
	
	
	<insert id="test_insert_vo" parameterType="com.spring.app.board.domain.TestVO">
		insert into spring_test(no, name, writeday)
		values(#{no},#{name}, default)	<!-- #{get 다음에 어떤것(예:getNo, getName)}이 들어간다. -->
	</insert>
	
	
	<insert id="test_insert_vo2" parameterType="com.spring.app.board.domain.TestVO2">
		insert into spring_test(no, name, writeday)
		values(#{no},#{name}, #{writeday})	
	</insert>
	
	
	<!-- #### 중요 #### 
       HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
       1. 데이터로 사용할때는 #{key명} 이고,
       2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
       3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는  그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
   	-->
	<insert id="test_insert_map" parameterType="java.util.HashMap">
		insert into spring_test(no, name, writeday)
		values(#{no},#{name}, default)	<!-- #{get 다음에 어떤것(예:getNo, getName)}이 들어간다. -->
	</insert>



<!--게시판 시작  --> 
<!-- // === # 39. 메인페이지 요청 === //  -->
	<resultMap type="HashMap" id="imgmapList">
		<result property="imgno" column="imgno" javaType="String"/>
		<result property="productname" column="productname" javaType="String"/>
		<result property="imgfilename" column="imgfilename" javaType="String"/>
	</resultMap>

	<select id="imgmapList" resultMap="imgmapList"> 
		select imgno, productname, imgfilename
		from tbl_main_image_product
		order by imgno asc
	</select>


	<!-- === #47. 로그인 처리하기 === -->
	<!-- /board/src/main/resources/mybatis/mybatis-config.xml 에서 typeAlias 설정을 해주었기 때문에
		 resultType에 com.spring.app.board.domain.MemberVO 대신 MemberVO만 작성 가능하다.  -->
	<select id="getLoginMember" resultType="MemberVO" parameterType="HashMap">
		SELECT userid, name, coin, point, pwdchangegap,
		       NVL(lastlogingap, trunc(months_between(sysdate, registerday))) AS lastlogingap, 
			   idle, email, mobile, postcode, address, detailaddress, extraaddress 
		FROM 
		( select userid, name, coin, point, 
		         trunc( months_between(sysdate, lastpwdchangedate) ) AS pwdchangegap,
				 registerday, idle, email, mobile, postcode, address, detailaddress, extraaddress 
		  from tbl_member 
		  where status = 1 and userid = #{userid} and pwd = #{pwd}
		) M 
		CROSS JOIN 
		( select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		  from tbl_loginhistory 
		  where fk_userid = #{userid} ) H
	</select>

	<!-- === tbl_member 테이블의 idle 컬럽의 값을 1로 변경하기 === -->
	<update id="updateIdle" parameterType="String">
		update tbl_member set idle = 1
		where userid = #{userid}
	</update>
	

	<!-- === tbl_loginhistory 테이블에 로그인 기록 입력하기 === -->
	<insert id="insert_tbl_loginhistory" parameterType="HashMap">
		insert into tbl_loginhistory(historyno, fk_userid, logindate, clientip)
		values(seq_historyno.nextval, #{userid}, default, #{clientip})
	</insert>


	<!-- === #57. 파일첨부가 없는 글쓰기 ===  VO에서 get 다음에 뭐뭐뭐 를 ${}안에 쓰면 됨 근데 컬럼명같이랑 똑같이 해놓음-->
   	<insert id="add" parameterType="boardVO">
         insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status)
         values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
   	</insert>
   	
   	
   	
   	<!-- #61. 페이징 처리를 안한, 검색어가 없는 전체 글목록 보여주기 ===  
   	<select id="boardListNoSearch" resultType="BoardVO">
	   	select seq, fk_userid, name, subject
	     	 , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		from tbl_board
		where status = 1
		order by seq desc
   	</select>
   	-->
   	
   	
   	<!-- 먼저 #61.을 주석처리 하고서 아래의 작업을 한다. -->
   	<!-- #99. 페이징 처리를 안한, 검색어가 없는 전체 글목록 보여주기 === 
   			     전체 글 목록을 보여줄때 딸린 댓글의 개수도 보여준다. -->
   	<select id="boardListNoSearch" resultType="BoardVO">
	   	select seq, fk_userid, name, subject
	     	 , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
	     	 , commentCount
		from tbl_board
		where status = 1
		order by seq desc
   	</select>
   	
   	
   	
   	<!-- 
   	=== #65. 글 1개 조회하기  ===  
   	<select id="getView" parameterType="HashMap" resultType="BoardVO">
   		SELECT previousseq, previoussubject, seq, fk_userid, name, subject
     		 , content, readCount, pw, nextseq, nextsubject 
		FROM
		(
		    select lag(seq, 1) over( order by seq desc ) AS previousseq         
		         , lag(subject, 1) over( order by seq desc ) AS previoussubject
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, pw
		         , lead(seq, 1) over( order by seq desc ) AS nextseq       
		         , lead(subject, 1) over( order by seq desc ) AS nextsubject
		    from tbl_board
		    where status = 1
		)V
		WHERE V.seq = #{seq}
   	</select>   	
   	-->
   	
   	
   	
   	<!-- === #136. 글 1개 조회하기  === 
   			먼저, 위의 #65 을 주석처리한 다음에 아래와 같이 한다.
   	
   	-->
	<select id="getView" parameterType="HashMap" resultType="BoardVO">
   		SELECT previousseq, previoussubject, seq, fk_userid, name, subject
     		 , content, readCount, regDate, pw, nextseq, nextsubject 
		FROM
		(
		    select lag(seq, 1) over( order by seq desc ) AS previousseq         
		         , lag(subject, 1) over( order by seq desc ) AS previoussubject
		         , seq, fk_userid, name, subject, content, readCount
		         , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate, pw
		         , lead(seq, 1) over( order by seq desc ) AS nextseq       
		         , lead(subject, 1) over( order by seq desc ) AS nextsubject
		    from tbl_board
		    where status = 1
			
			<choose>
				<when test='searchType == "subject" and searchWord != ""'>
					and lower(subject) like '%'||lower(#{searchWord})||'%'
				</when>
				<when test='searchType == "content" and searchWord != ""'>
					and lower(content) like '%'||lower(#{searchWord})||'%'
				</when>
				<when test='searchType == "subject_content" and searchWord != ""'>
					and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
				</when>
				<when test='searchType == "name" and searchWord != ""'>
					and lower(name) like '%'||lower(#{searchWord})||'%'
				</when>
				<otherwise></otherwise>
			</choose>
		)V
		WHERE V.seq = #{seq}
   	</select>   
   	
   	
   	
   	
   	
   	<!-- === #67. 글조회수 1증가시키기 === -->	 
   	<update id="increase_readCount" parameterType="String">
   		update tbl_board set readCount = readCount + 1
		where seq = #{seq}
   	</update>
   	
   	
   	
   	
   	<!-- === #75. 1개 글 수정하기 === -->
   	<update id="edit" parameterType="BoardVO">
   		update tbl_board set subject = #{subject}
   							,content = #{content}
		where seq = #{seq}
   	</update>
   	
   	
   	<!-- === #80. 1개 글 삭제하기  === -->
   	<delete id="del" parameterType="String">
   		delete from tbl_board
   		where seq = #{seq}
   	</delete>
   	
   	
   	
   	<!-- === #88. 댓글쓰기(tbl_comment 테이블에 insert)  === -->
  	<insert id="addComment" parameterType="CommentVO">
  		<!-- 첨부파일이 없는 경우 -->
  		insert into tbl_comment(seq, fk_userid, name, content, regDate, parentSeq, status)
  		values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
  		
  		
  		<!-- 첨부파일이 있는 경우 -->
  	</insert>
  
  
  
  
   	<!-- === #89.-1 tbl_board 테이블에 commentCount 컬럼이 1증가(update)  === -->
   	<update id="updateCommentCount" parameterType="String">
   		update tbl_board set commentCount = commentCount + 1
   		where seq = #{parentSeq}
   	</update>
   	
   	
   	
   	<!-- === #89. -2 tbl_member 테이블의 point 컬럼의 값을 50점을 증가(update)  === -->
   	<update id="updateMemberPoint" parameterType="HashMap">
      	update tbl_member set point = point + to_number(#{point})
      	where userid = #{userid}
   	</update>



	<!-- === #93. 원 게시물에 딸린 댓글들을 조회해오기  === -->
	<!-- 첨부파일이 없는 경우 -->
	<select id="getCommentList" parameterType="String" resultType="CommentVO">
		select seq, fk_userid, name, content
     		 , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		from tbl_comment
		where status = 1 and parentSeq = #{parentSeq}
		order by seq desc
	</select>
	
	

	<!-- === #98. 댓글 수정(Ajax 로 처리)  === -->
	<update id="updateComment" parameterType="HashMap">
      	update tbl_comment set content = #{content}, regdate = sysdate
      	where seq = #{seq}
   	</update>


   <!-- === #103. -1  댓글 삭제하기(Ajax로 처리)=== -->
   <delete id="deleteComment" parameterType="String">
      	delete from tbl_comment
      	where seq = #{seq}
   </delete>
   
   
   
   <!-- === #102. -2 댓글삭제시 tbl_board 테이블에 commentCount 컬럼이 1감소(update) === -->
   <update id="updateCommentCount_decrease" parameterType="String">
      	update tbl_board set commentCount = commentCount - 1
       	where seq = #{parentSeq}
   </update>




   <!-- === #108. CommonAop 클래스에서 사용하는 것으로 특정 회원에게 특정 점수만큼 포인트를 증가하기 위한 것  === -->
   <update id="pointPlus" parameterType="HashMap">
   		update tbl_member set point = point + to_number(#{point})
       	where userid = #{userid}
   </update>



	<!-- #### 중요 #### 
       HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
       1. 데이터로 사용할때는 #{key명} 이고,
       2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
       3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는  그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
   	-->
	<!-- === #108. 페이징 처리를 안한, 검색어가 있는 전체 글목록 보여주기  === -->
	<select id="boardListSearch" parameterType="HashMap" resultType="BoardVO">
		select seq, fk_userid, name, subject
	     	 , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
	     	 , commentCount
		from tbl_board
		where status = 1
		<choose>
			<when test='searchType == "subject" and searchWord != ""'>
				and lower(subject) like '%'||lower(#{searchWord})||'%'
			</when>
			<when test='searchType == "content" and searchWord != ""'>
				and lower(content) like '%'||lower(#{searchWord})||'%'
			</when>
			<when test='searchType == "subject_content" and searchWord != ""'>
				and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
			</when>
			<when test='searchType == "name" and searchWord != ""'>
				and lower(name) like '%'||lower(#{searchWord})||'%'
			</when>
			<otherwise></otherwise>
		</choose>
		order by seq desc
	</select>




	<!-- === #119. 검색어 입력시 자동글 완성하기  7  === -->
	<select id="wordSearchShow" parameterType="HashMap" resultType="String">
		<choose>
			<when test='searchType == "subject"'>
				select subject
			</when>
			<otherwise>
				select distinct name
			</otherwise>
		</choose>
		from tbl_board
		where status = 1
		<choose>
			<when test='searchType == "subject" and searchWord != ""'>
				and lower(subject) like '%'||lower(#{searchWord})||'%'
			</when>
			<otherwise>
				and lower(name) like '%'||lower(#{searchWord})||'%'
			</otherwise>
		</choose>
		
		
		<!-- 
	  		select 문에서 distinct 와 order by 절을 함께 사용할때는 조심해야 한다.
	        order by 절에는 select 문에서 사용된 컬럼만 들어올 수가 있다.
	                    또는 order by 절을 사용하지 않아야 한다.
	    -->
		<choose>
			<when test='searchType == "subject"'>
				order by regdate desc
			</when>
			<otherwise>
				order by name asc
			</otherwise>
		</choose>
	</select>
	
	
	
	
	
	<!-- === #125. 총 게시물 건수 (totalCount) 구하기 - 검색이 있을 때와 검색이 없을때로 나뉜다.  === -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_board
		where status = 1
		<choose>
			<when test='searchType == "subject" and searchWord != ""'>
				and lower(subject) like '%'||lower(#{searchWord})||'%'
			</when>
			<when test='searchType == "content" and searchWord != ""'>
				and lower(content) like '%'||lower(#{searchWord})||'%'
			</when>
			<when test='searchType == "subject_content" and searchWord != ""'>
				and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
			</when>
			<when test='searchType == "name" and searchWord != ""'>
				and lower(name) like '%'||lower(#{searchWord})||'%'
			</when>
			<otherwise></otherwise>
		</choose>
	</select>
	
	
	
	
   <!-- === #127. 글목록 가져오기 (페이징 처리 했으며, 검색어가 있는 것 또는 검색어 없는 것 모두 포함한 것이다.) === -->
   <select id="boardListSearch_withPaging" parameterType="HashMap" resultType="BoardVO">
      	SELECT seq, fk_userid, name, subject, readCount, regDate, commentCount
      	FROM
      	(
	      	select row_number() over(order by seq desc) AS rno
	      		 , seq, fk_userid, name, subject
		     	 , readCount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		     	 , commentCount
			from tbl_board
			where status = 1
			<choose>
				<when test='searchType == "subject" and searchWord != ""'>
					and lower(subject) like '%'||lower(#{searchWord})||'%'
				</when>
				<when test='searchType == "content" and searchWord != ""'>
					and lower(content) like '%'||lower(#{searchWord})||'%'
				</when>
				<when test='searchType == "subject_content" and searchWord != ""'>
					and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
				</when>
				<when test='searchType == "name" and searchWord != ""'>
					and lower(name) like '%'||lower(#{searchWord})||'%'
				</when>
				<otherwise></otherwise>
			</choose>
		)V
		WHERE V.rno between #{startRno} and #{endRno}
   </select>
	
	
	
	

	<!-- === #149. 원게시물에 딸린 댓글내용들을 페이징 처리하기(Ajax 로 처리) === -->
	<select id="getCommentList_paging" parameterType="HashMap" resultType="CommentVO">
		<!-- 첨부파일이 없는 경우  -->
		SELECT seq, fk_userid, name, content, regDate
		FROM
		(
			select row_number() over(order by seq desc) AS rno 
				 , seq, fk_userid, name, content
	     		 , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
			from tbl_comment
			where status = 1 and parentSeq = #{parentSeq}
			order by seq desc
		) V
		WHERE rno BETWEEN #{startRno} AND #{endRno}
	
	
		<!-- 첨부파일이 있는 경우  -->
	
	</select>


	<!-- === #152. 페이징 처리시 보여주는 순번을 나타내기 위한 것  === -->
	<select id="getCommentTotalCount" parameterType="String" resultType="int">
		select count(*)
		from tbl_comment
		where parentSeq = #{parentSeq}
	</select>
	



	<!-- === 서울 따릉이 오라클 입력하기  === -->
	<insert id="insert_seoul_bicycle_rental" parameterType="Seoul_bicycle_rental_VO">
		insert into seoul_bicycle_rental(lendplace_id, statn_addr1, statn_addr2, statn_lat, statn_lnt)
      	values(#{lendplace_id}, #{statn_addr1}, #{statn_addr2}, #{statn_lat}, #{statn_lnt})
	</insert>




	<!-- === 서울 따릉이 오라클 조회하기  === -->
	<resultMap type="HashMap" id="seoul_bicycle_Map">
		<result property="GU" column="GU" javaType="String" />
		<result property="CNT" column="CNT" javaType="String" />
		<result property="PERCNTAGE" column="PERCNTAGE" javaType="String" />
	</resultMap>
	
	<select id="select_seoul_bicycle_rental" resultMap="seoul_bicycle_Map">
		WITH A 
		AS (
		    SELECT GU, COUNT(*) AS CNT
		    FROM 
		    (
		    select substr(substr(statn_addr1, instr(statn_addr1, ' ', 1)+1), 1, instr(substr(statn_addr1, instr(statn_addr1, ' ', 1)+1), ' ', 1)-1) AS GU
		         , lendplace_id, statn_addr1, statn_addr2, statn_lat, statn_lnt   
		    from seoul_bicycle_rental
		    ) V
		    WHERE GU LIKE '%구'
		    GROUP BY GU
		    ORDER BY CNT DESC       
		)
		SELECT A.GU, A.CNT, TO_CHAR( ROUND((A.CNT / B.TOTAL) * 100, 1), '990.0') AS PERCNTAGE
		FROM A CROSS JOIN (SELECT SUM(CNT) AS TOTAL FROM A) B
	</select>

















</mapper>