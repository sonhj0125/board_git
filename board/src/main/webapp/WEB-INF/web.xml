<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- ==== #224. (웹채팅관련6, 웹채팅관련13) ==== -->
		<!-- <param-value>/WEB-INF/spring/root-context.xml</param-value> -->
		<!-- 위의  <param-value> </param-value> 부분을 주석 처리하고 난 뒤, 아래와 같이 해야 한다. -->
		<param-value>/WEB-INF/spring/root-context.xml, <!-- 오라클 -->
					 /WEB-INF/spring/mongo-connection.xml, <!-- 웹채팅관련13 -->
					 /WEB-INF/spring/securityConfig/security-context.xml
		<!-- ===== #258. 스프링보안05 =====
                    위의 /WEB-INF/spring/securityConfig/security-context.xml 대신에 아래처럼 사용해도 됨. 
        classpath*:com/spring/app/security/config/security-context.xml 
                    여기서는 위의 /WEB-INF/spring/securityConfig/security-context.xml 으로 사용하겠음. -->
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- ===== #259. 스프링보안06 =====
        spring security 세션 리스너 등록(하나의 사용자ID로 서로다른 브라우저를 사용하여 동시에 로그인을 못하도록 막아주는 리스너) -->
    <listener>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>
	<!-- ===== #260. 스프링보안07 =====
         spring security 필터만들기
         (이것은 웹으로 들어오는 요청에 대해 spring security가 관여하도록 만들어주는 프록시 필터이다. 
                      이필터를 통해 인증 및 권한(역할)을 체크해준다. Spring Security는 필터로 동작하는 것이다!!!) 
   --> 
   <filter> 
      <filter-name>springSecurityFilterChain</filter-name> 
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> 
   </filter> 
   <filter-mapping> 
      <filter-name>springSecurityFilterChain</filter-name> 
      <url-pattern>/*</url-pattern> 
   </filter-mapping>
    <!-- <filter-name>는 반드시 springSecurityFilterChain 이름으로 해야한다. 
         Spring Security 내부에서  이 이름(springSecurityFilterChain)으로 
         DelegatingFilterProxy 클래스를 찾기 때문에 다른 이름을 줄 경우 적용할 수 가 없다. 
                그리고 해당 필터가 적용될 URL 패턴을 모든 패턴을 의미하는 /* 를 주도록 해야 한다. 
                여기서 조심할 것은 /* 가 아닌 /*.action 이나 /*.do 를 하면 안된다는 것이다!!!
         
         Spring Security 에서는 내부적으로 작업을 위해 사용되는 URL 들이 있는데 이 URL 들은 뒤에 확장자가 붙는 스타일이 아니다.
         (예를 들어 로그인 아이디와 패스워드를 입력받아 인증 관련 작업을 하는 URL이 j_spring_security_check 이다.)
                  그래서 확장자로 패턴을 줄 경우 로그인을 하지 못하는 상황이 발생한다.
         
                  그런데 URL 패턴을 /* 으로 줄 경우 이미지 파일이나 css 파일과 같이 Spring Security 가 적용되어야 할 필요가 없는 것들도 있는데
                  이런것 까지도 관여하게 되지 않느냐고 질문할 수 있다. 
                  그래서 Spring Security 는 Spring Security 가 관여하지 않는 URL 패턴을 따로 지정할 수 있다. 
                  이와 같이  Spring Security 가 관여하지 않는 URL 패턴을 지정할때 이미지 파일들이 들어있는 디렉토리나 css 파일들이 들어있는 디렉토리를 지정해주면 된다.                
    -->

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- ==== #231. 웹채팅관련13 ==== -->
			<!-- 
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value> 
			-->
			<!-- 먼저 위처럼 주석 처리를 하고 난 후 아래의 작업을 한다. -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml,
						 /WEB-INF/spring/config/websocketContext.xml
			</param-value> <!-- only WEB -->
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
<!--    <url-pattern>/</url-pattern>  -->
   		<!-- URL 패턴 아무거나 다 받아줌 -->
        
        <!-- === #13. URL 패턴이 끝나는 글자가 .action 인 것으로 요청을 했을때 appServlet 서블릿이 받아서 처리를 해준다. === --> 
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	<!-- === #14. POST 방식으로 요청 시 데이터 인코딩처리(UTF-8)를 위한 필터 추가 -->
	<filter>
	   <filter-name>encodingFilter</filter-name>
	   <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	   <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>      
	   </init-param>
	</filter> 
	
	<filter-mapping>
	   <filter-name>encodingFilter</filter-name>
	   <url-pattern>*</url-pattern>
	</filter-mapping>
	
	<!--  ===== #14. 시작 웹페이지 등록하기 ===== -->
   	<welcome-file-list>
		<welcome-file>index.action</welcome-file>
	</welcome-file-list>

</web-app>
